//=============================================================================
//
// バー処理 [bar.cpp]
// Author : 呉優
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "bar.h"
#include "field.h"
#include "input.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************
// バーの描画データ(横を+1しているのはNULLの分)
char bar[BAR_H][BAR_W + 1] = {
	"===============",
};

BAR g_Bar;

//=============================================================================
// バーの初期化処理
//=============================================================================
void InitBar(void) {

	g_Bar.x = 5;									// バーのx座標初期化
	g_Bar.y = FIELD_H - BAR_H - BAR_FLOAT;			// バーのy座標初期化(-1しているのは床の分)

	g_Bar.speed = 8;								// バーの初期速度
}

//=============================================================================
// バーの終了処理
//=============================================================================
void UninitBar(void) {

}

//=============================================================================
// バーの更新処理
//=============================================================================
void UpdateBar(void) {

	// 座標をバックアップ
	int x_old = g_Bar.x;

	char key = 0x00;
	GetKeyboardTrigger(&key);

	//////////////////////////////////////////////////////////////////////////////
	// 移動処理
	//////////////////////////////////////////////////////////////////////////////
	switch (key) {
	case 0x4b:	// ←
		for (int i = 0; i < g_Bar.speed; i++) {
			g_Bar.x--;

			// 場外を超えようとしたら戻す
			if (g_Bar.x <= 0) {
				g_Bar.x = x_old;
				break;
			}

			// バックアップ更新
			x_old = g_Bar.x;
		}
		break;

	case 0x4d:	// →
		for (int i = 0; i < g_Bar.speed; i++) {
			g_Bar.x++;

			// 場外を超えようとしたら戻す
			if (g_Bar.x + BAR_W >= FIELD_W) {	// -1しているのは壁の分
				g_Bar.x = x_old;
				break;
			}

			// バックアップ更新
			x_old = g_Bar.x;
		}
		break;

	default:
		break;
	}
}

//=============================================================================
// バーの描画処理
//=============================================================================
void DrawBar(void) {
	for(int i = 0; i < BAR_H; i++)
		SetField(g_Bar.x, g_Bar.y + i, bar[0]);
}

//=============================================================================
// バーを取得
//=============================================================================
BAR* GetBar(void) {
	return &g_Bar;
}