//=============================================================================
//
// リザルト処理 [result.cpp]
// Author : 呉優
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "result.h"
#include "field.h"
#include "score.h"
#include "input.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define		SCORE_MENU_H		(7)				// スコア背景サイズ
#define		SCORE_MENU_W		(20)

//*****************************************************************************
// 構造体定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************
char result[DISP_H][DISP_W + 1] = {
	"+----------------------------------------------------------+                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"|                                                          |                    ",
	"+----------------------------------------------------------+                    ",
};
char score_menu[SCORE_MENU_H][SCORE_MENU_W + 1] = {
	"                    ",
	"       SCORE        ",
	"                    ",
	"                    ",
	"                    ",
	"  PRESS ANY BUTTON  ",
	"                    ",
};

int g_FinalScore;

int g_ScoreMenu_x;											// スコアメニューの座標
int g_ScoreMenu_y;
int g_Score_x;												// 最終スコアの座標
int g_Score_y;

//=============================================================================
// リザルトの初期化処理
//=============================================================================
void InitResult(void) {

	memcpy(result, GetField(), sizeof(result));				// ゲームで最後のフレームを保存
	g_FinalScore = GetScore();								// 最終スコアを取得

	g_ScoreMenu_x = 20;										// スコアメニューの座標設定
	g_ScoreMenu_y = 7;

	g_Score_x = 25;
	g_Score_y = 10;

	//////////////////////////////////////////////////////////////////////////////
	// スコアメニューを配置
	//////////////////////////////////////////////////////////////////////////////
	// NULL以外すべてコピー
	for (int i = 0; i < SCORE_MENU_H; i++) {
		for (int j = 0; j < SCORE_MENU_W; j++) {
			memcpy(&result[g_ScoreMenu_y + i][g_ScoreMenu_x + j], &score_menu[i][j], sizeof(char));
		}
	}

	//////////////////////////////////////////////////////////////////////////////
	// 最終スコアを書き込み
	//////////////////////////////////////////////////////////////////////////////
	for (int i = 0; i < SCORE_DIGIT_LIMIT; i++) {
		// スコアを桁ずつcharへ変換
		int digit = g_FinalScore % 10;
		char _digit = '0';
		switch (digit) {
		case 0:
			_digit = '0';
			break;
		case 1:
			_digit = '1';
			break;
		case 2:
			_digit = '2';
			break;
		case 3:
			_digit = '3';
			break;
		case 4:
			_digit = '4';
			break;
		case 5:
			_digit = '5';
			break;
		case 6:
			_digit = '6';
			break;
		case 7:
			_digit = '7';
			break;
		case 8:
			_digit = '8';
			break;
		case 9:
			_digit = '9';
			break;
		default:
			break;
		}
		result[g_Score_y][g_Score_x + SCORE_DIGIT_LIMIT - i] = _digit;
		g_FinalScore /= 10;
	}
}

//=============================================================================
// リザルトの終了処理
//=============================================================================
void UninitResult(void) {

}

//=============================================================================
// リザルトの更新処理
//=============================================================================
void UpdateResult(void) {	
	if (_kbhit()) {
		_getch();	// _kbhit()を消費
		SetMode(MODE_TITLE);
	}
}

//=============================================================================
// リザルトの描画処理
//=============================================================================
void DrawResult(void) {
	system("cls");
	for (int i = 0; i < DISP_H; i++) {
		printf("%s\n", result[i]);
	}
}